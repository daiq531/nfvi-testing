apiVersion: apps/v1
kind: Deployment
metadata:
  name: autoscale-server
  labels:
    app: autoscale-server
spec:
  replicas: 1
  selector:
    matchLabels:
      app: autoscale-server
  template:
    metadata:
      labels:
        app: autoscale-server
    spec:
      containers:
      - name: cpuload
        image: quasarstack/flask:v1
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
        volumeMounts:
        - mountPath: /data/cpuload.py
          subPath: cpuload.py
          name: cpuload
      volumes:
      - name: cpuload
        configMap:
          name: autoscale-cpuload
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: autoscale-cpuload
  labels:
    app: autoscale-server
data:
  "cpuload.py": |
     import math
     import time
     def cpuload():
         etime = {}
         start_time = time.time()
         for x in range(1, 1000000):
             s = math.sqrt(x)
         end_time = time.time()
         time_taken = end_time - start_time
         etime["start_time"] = start_time
         etime["end_time"] = end_time
         etime["time_taken"] = time_taken
         return etime
---
apiVersion: v1
kind: Service
metadata:
  name: autoscale-server
spec:
  type: ClusterIP
  selector:
    app: autoscale-server
  ports:
  - port: 80
    targetPort: 8080